pipeline {
    agent any
    environment {
        NAMESPACE = 'formazione-sou'
        KUBECONFIG = '/Users/anconitani/.kube/config'
    }
    parameters {
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Tag dell\'immagine Docker da rilasciare')
    }
    stages {
        stage('Configure Kubectl') {
            steps {
                sh 'kubectl config use-context minikube'
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Add Helm Repository') {
            steps {
                script {
                    // Add the ingress-nginx repository
                    sh 'helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx'
                    sh 'helm repo update'  // Update the Helm repo to get the latest charts
                }
            }
        }

        stage('Update Helm Dependencies') {
            steps {
                script {
                    dir('charts') {
                        // Update Helm dependencies, fetching from the repository
                        sh 'helm dependency update ./ --debug'
                    }
                }
            }
        }

        stage('Verify Charts Directory') {
            steps {
                script {
                    dir('charts') {
                        // Verify the charts directory
                        sh 'ls -l'  // List the contents
                    }
                }
            }
        }

        stage('Build Helm Dependencies') {
            steps {
                script {
                    dir('charts') {
                        // Build the Helm dependencies
                        sh 'helm dependency build ./ --debug'
                    }
                }
            }
        }

        stage('Install/Upgrade Helm Chart') {
            steps {
                script {
                    dir('charts') {
                        sh """
                        helm upgrade --install flask-app ./ \
                            --namespace ${NAMESPACE} \
                            --set image.tag=${params.IMAGE_TAG}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completata con successo!'
        }
        failure {
            echo 'Pipeline fallita. Controlla i log per dettagli.'
        }
    }
}
